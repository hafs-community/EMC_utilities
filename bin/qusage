#! /bin/bash

function moab_usage {
cat<<EOF
This script generates CPU core usage information by a specific user,
account, group, class, queue (qos) or by all users.  

To call it:
  qusage -u username
  qusage username
  qusage -g groupname
  qusage -a            (all users)
  qusage -p partition
  qusage -c class
  qusage -A account
  qusage -q queuename   (same as qos)
EOF
if [[ "$#" != 0 ]] ; then
    echo "$@"
fi
}

function slurm_usage {
cat<<EOF
This script generates CPU core usage information by a specific user,
account, group, class, queue (qos) or by all users.  

To call it:
  qusage -u username
  qusage username
  qusage -a           (all users)
  qusage -p partition
  qusage -q qosname   (same as queue)
  qusage -r reservation
  qusage -A account
EOF
if [[ "$#" != 0 ]] ; then
    echo "$@"
fi
}

function awkit {
    printf "%20s:  " "$1"
    grep  -E '^ *(Moab.)?[0-9]+[      ]*[A-Za-z.][0-9A-Za-z_.]+[      ]+.*(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec).*' | \
    awk '
      BEGIN{
        r=0; i=0; o=0;
      }
      {
        if($3=="Running") {
          r+=$4
        } else if($3=="Idle") {
          i+=$4
        } else {
          o+=$4
        }
      } END {
        printf "running %5d, queued %5d, other %5d\n",r,i,o
      }
    '
}

function moab_needarg {
    if [[ "$1" -lt 2 ]] ; then
        moab_usage "SCRIPT IS ABORTING: $2 REQUIRES AN ARGUMENT" 1>&2
        exit 2
    fi
}

function slurm_needarg {
    if [[ "$1" -lt 2 ]] ; then
        slurm_usage "SCRIPT IS ABORTING: $2 REQUIRES AN ARGUMENT" 1>&2
        exit 2
    fi
}

function print_slurm {
    printf "%20s:  " "$1"
    tail -n +2 | \
    awk  '
      BEGIN{
        r=0; i=0; o=0;
      }
      {
        if($2=="RUNNING") {
          r+=$1
        } else if($2=="PENDING") {
          i+=$1
        } else {
          o+=$1
        }
      } END {
        printf "running %5d, queued %5d, other %5d\n",r,i,o
      }
    '
}

function use_slurm {
    if [[ "$#" == 0 ]] ; then
        squeue --user="$USER" --format '%C %T' | print_slurm "$USER"
        exit "$?"
    fi
    while [[ "$#" -gt 0 ]] ; do
        case "$1" in
        -a) squeue -o '%C %T' | print_slurm "*"                   ; shift 1 ;;
        -u) slurm_needarg "$#" "$1" ; squeue -u "$2" -o '%C %T' | print_slurm "$2"  ; shift 2 ;;
        -p) slurm_needarg "$#" "$1" ; squeue -p "$2" -o '%C %T' | print_slurm "$2"  ; shift 2 ;;
        -q) slurm_needarg "$#" "$1" ; squeue -q "$2" -o '%C %T' | print_slurm "$2"  ; shift 2 ;;
        -r) slurm_needarg "$#" "$1" ; squeue -R "$2" -o '%C %T' | print_slurm "$2"  ; shift 2 ;;
        -A) slurm_needarg "$#" "$1" ; squeue -A "$2" -o '%C %T' | print_slurm "$2"  ; shift 2 ;;
        -h) slurm_usage                                                 ; exit 0  ;;
        --) shift 1 ; break ;;
        -*) usage "SCRIPT IS ABORTING: INVALID ARGUMENT $1" 1>&2  ; exit 1  ;;
        *) squeue -u="$USER" -o '%C %T' | print_slurm "$USER"     ; shift 1 ;;
        esac
    done
}

function use_moab {
    if [[ "$#" == 0 ]] ; then
        showq -w "user=$USER" | awkit "$USER"
        exit "$?"
    fi

    while [[ "$#" -gt 0 ]] ; do
        case "$1" in
            -a) showq | awkit "*"  ;                                            shift 1 ;;
            -u) moab_needarg "$#" "$1" ; showq -w "user=$2" | awkit "$2"      ; shift 2 ;; 
            -g) moab_needarg "$#" "$1" ; showq -w "group=$2" | awkit "$2"     ; shift 2 ;;
            -c) moab_needarg "$#" "$1" ; showq -w "class=$2" | awkit "$2"     ; shift 2 ;;
            -q) moab_needarg "$#" "$1" ; showq -w "qos=$2" | awkit "$2"       ; shift 2 ;;
            -p) moab_needarg "$#" "$1" ; showq -w "partition=$2" | awkit "$2" ; shift 2 ;;
            -A) moab_needarg "$#" "$1" ; showq -w "acct=$2" | awkit "$2"      ; shift 2 ;;
            -h) moab_usage                                                    ; exit 0  ;;
            --) shift 1 ; break ;;
            -*) moab_usage "SCRIPT IS ABORTING: INVALID ARGUMENT $1" 1>&2 ; exit 1 ;;
            *) showq -w "user=$1" | awkit "$1" ; shift 1 ;;
        esac
    done
}

if ( which squeue > /dev/null 2>&1 ) ; then
    use_slurm "$@"
else
    use_moab "$@"
fi